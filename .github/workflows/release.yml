name: Release

on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - master

jobs:
  release:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            extension: tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            extension: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            extension: zip
          - os: macos-latest
            target: aarch64-apple-darwin
            extension: zip

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
      
      - name: Install musl target (Linux MUSL)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: rustup target add x86_64-unknown-linux-musl
      
      - name: Install macOS targets
        if: startsWith(matrix.target, 'aarch64-apple') || startsWith(matrix.target, 'x86_64-apple')
        run: rustup target add ${{ matrix.target }}
      
      - name: Extract project version
        id: get_version
        shell: bash
        run: |
          PROJECT_NAME=$(grep '^name' Cargo.toml | head -n 1 | awk -F '"' '{print $2}')
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(grep '^version' Cargo.toml | head -n 1 | awk -F '"' '{print $2}')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Prepare artifact directory
        shell: bash
        run: |
          mkdir -p artifact
          
          # Determine the binary name (usually the crate name)
          if [ "${{ runner.os }}" = "Windows" ]; then
            BIN_NAME="${{ env.PROJECT_NAME }}.exe"
          else
            BIN_NAME="${{ env.PROJECT_NAME }}"
          fi
          
          # Copy the binary and license files
          cp "target/${{ matrix.target }}/release/$BIN_NAME" artifact/
          cp LICENSE* README* artifact/ 2>/dev/null || true
      
      - name: Package (Unix)
        if: matrix.extension == 'tar.gz'
        shell: bash
        working-directory: artifact
        run: |
          PACKAGE_NAME="${{ env.PROJECT_NAME }}-${{ env.VERSION }}-${{ matrix.target }}"
          tar czf "../$PACKAGE_NAME.tar.gz" *
          echo "ASSET_PATH=$PACKAGE_NAME.tar.gz" >> $GITHUB_ENV
          echo "ASSET_NAME=$PACKAGE_NAME.tar.gz" >> $GITHUB_ENV
      
      - name: Package (macOS)
        if: matrix.extension == 'zip'
        shell: bash
        working-directory: artifact
        run: |
          PACKAGE_NAME="${{ env.PROJECT_NAME }}-${{ env.VERSION }}-${{ matrix.target }}"
          zip -r "../$PACKAGE_NAME.zip" *
          echo "ASSET_PATH=$PACKAGE_NAME.zip" >> $GITHUB_ENV
          echo "ASSET_NAME=$PACKAGE_NAME.zip" >> $GITHUB_ENV
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}
      
      - name: Create GitHub release (tag only)
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.ASSET_PATH }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
